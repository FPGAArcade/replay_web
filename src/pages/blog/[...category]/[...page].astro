---
import type { InferGetStaticPropsType, GetStaticPaths } from "astro";
import { getCollection } from "astro:content";

import LayoutBlog from "@layouts/LayoutBlog.astro";
import Post from "@components/Post.astro";

import type { Categories } from "@layouts/LayoutBlog.astro";

export const getStaticPaths = (async ({ paginate }) => {
  const posts = (await getCollection("posts")).sort(
    (a, b) => b.data.created.getTime() - a.data.created.getTime(),
  );
  const categories = [...posts.map((post) => post.data.categories).flat()].sort(
    (a, b) => a.localeCompare(b),
  );

  const categoryInfo = categories.reduce((acc: Categories, val) => {
    acc[val] = { name: val, count: (acc[val]?.count ?? 0) + 1 };
    return acc;
  }, {});

  // Post routes for top level /blog/[page]
  const pathsRoot = paginate(posts, {
    pageSize: 8,
    params: { category: undefined },
    props: { categories: categoryInfo, isRoot: true },
  });

  // Filtered post routes byte category for /blog/[category]/[page]
  const pathsCategory = [...new Set(categories)].flatMap((category) => {
    const categoryPosts = posts.filter((post) =>
      post.data.categories.includes(category),
    );
    return paginate(categoryPosts, {
      pageSize: 8,
      params: { category: category },
      props: { categories: categoryInfo, isRoot: false },
    });
  });

  return [...pathsRoot, ...pathsCategory];
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;
const { page, categories, isRoot } = Astro.props;
const params = Astro.params;

const title = isRoot ? "Blog: All Posts" : `Blog: ${params.category}`;
const urlPattern = isRoot ? `/blog/{}` : `/blog/${params.category}/{}`;
---

<LayoutBlog title={title} categories={categories}>
  <section>
    <div class="section-header underlined">
      <h1>{title}</h1>
    </div>

    <div class="posts">
      {page.data.map(async (post) => <Post post={post} summary />)}
    </div>
  </section>

  <div class="pagination">
    <ul>
      <li>{page.url.prev ? <a href={page.url.prev}>« Newer</a> : "« Newer"}</li>
      <li>{page.currentPage} / {page.lastPage}</li>
      <li>{page.url.next ? <a href={page.url.next}>Older »</a> : "Older »"}</li>
    </ul>
  </div>
</LayoutBlog>

<style>
  .posts {
    display: grid;
    grid-gap: 1rem;
    max-width: 80ch;
  }
</style>
