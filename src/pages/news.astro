---
import Layout from "@layouts/Layout.astro";
import { getCollection, getEntries } from "astro:content";
import { Image } from "astro:assets";
import { Icon } from "astro-icon";
import PostExcerpt from "@components/PostExcerpt.astro";

const posts = (await getCollection("posts")).sort((a,b) => b.data.created.getTime() - a.data.created.getTime())
---

<Layout title="News">
  <main>
    <h1>News</h1>

    <section class="posts">
      {
        posts.map(async (post) => {
          const authors = await getEntries(post.data.authors);
          const published = new Date(post.data.created).toLocaleDateString(
            "en-GB",
            {
              weekday: "short",
              year: "numeric",
              month: "short",
              day: "numeric",
            }
          );
          return (
            <>
              <article class="post">
                <a href={`/news/${post.slug}`}>
                  <div class="post__title">{post.data.title}</div>
                  <div class="meta">
                    <span>
                      <Icon name="mdi:calendar-month" /><span>{published}</span>
                    </span>
                    <span>
                      <Icon name="mdi:account" />{authors.map((author) => (<span class="meta__author">{author.data.name.trim()}</span>))}
                    </span>
                    {false && <span><Icon name="mdi:book-open-variant" /><span>?? minutes</span></span>}
                  </div>
                  <div class="post__image">
                    {post.data.image && (
                      <Image
                        src={post.data.image}
                        alt={post.data.imageAlt ?? ""}
                      />
                    )}
                  </div>
                  <PostExcerpt class="post__description" post={post}></PostExcerpt>
                </a>
              </article>
            </>
          );
        })
      }
    </section>
  </main>
</Layout>

<style is:global>
  .post a > div:not(:first-child) {
    margin: 0.5rem;
  }
</style>
<style>
  .posts {
    --max-col-count: 3;
    --grid-gap: 1rem;
    --total-grid-gap: calc(var(--max-col-count) * var(--grid-gap));

    display: grid;


    /* Auto fill grid but limit to at most N cols regardless of browser width */
    grid-template-columns: repeat(
      auto-fill,
      minmax(
        max(14rem, calc((100% - var(--total-grid-gap)) / var(--max-col-count))),
        1fr
      )
    );
    grid-gap: var(--grid-gap);
  }

  .post {
    display: flex;
    border: 1px solid darkgrey;
    background: white;
    min-height: 20rem;
  }

  .post a {
    width: 100%;
    text-decoration: none;
    color: black;
  }

  .post:is(:hover, :focus-within) {
    opacity: 0.8;
  }

  .post__title {
    background: var(--rpl-header-background-color);
    color: var(--rpl-link-color);
    height: 2lh;

    text-align: center;
    font-size: 1.25em;
    font-weight: bold;

    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;

    @supports (-webkit-line-clamp: 2) {
      white-space: initial;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
    }
  }

  .meta {
    display: inline-flex;
    justify-content: start;
    align-items: center;
    font-size: 0.7rem;
    text-transform: uppercase;
  }

  .meta > span {
    margin-inline-end: 0.5rem;
  }

  .meta * {
    vertical-align: middle;
  }

  .meta svg {
    height: 0.7rem;
    padding-inline-end: 0.1rem;
  }

  .meta__author:not(:last-child)::after {
    content: ", ";
  }
</style>
