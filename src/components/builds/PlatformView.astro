---
import * as Consts from "src/constants";
import CoreCard from "./CoreCard.vue";
import { BuildkiteIcon } from "node_modules/vue3-simple-icons/dist/types/main";

interface Props {
  platform: string;
}

type ReleaseTrain = "devel" | "stable" | "testing";
type BuildType = "core";

interface Build {
  buildDate: EpochTimeStamp;
  buildType: BuildType;
  coreId: string;
  downloadURL: string;
  id: string;
  platformId: string;
  releaseDate: Record<ReleaseTrain, EpochTimeStamp>;
  releaseTrain: Array<ReleaseTrain>;
  s3key: string;
}

const sortByBuildDate = (arr: Array<Build>) => {
  return arr.sort(function (a, b) {
    return new Date(b.buildDate).getTime() - new Date(a.buildDate).getTime();
  });
};

const getUniqBy = (arr: Array<Build>, prop: keyof Build) => {
  const set = new Set();

  return arr.filter((o) => {
    if (!set.has(o[prop])) {
      let stable = arr.find((c) => {
        if (o[prop] == c.coreId && c.releaseTrain.includes("stable")) {
          return true;
        }
        return false;
      });
      if (stable && o == stable) {
        set.add(o[prop]);
        return true;
      }
      if (!stable) {
        set.add(o[prop]);
        return true;
      }
      return false;
    }
  });
};

const sortByCoreName = (arr: Array<any>) => {
  return arr.sort(function (a, b) {
    return a.coreId.localeCompare(b.coreId);
  });
};

const { platform } = Astro.props;

// TODO: [Gary] Reduce data fetched
const res = await fetch(
  `${Consts.BASE_URL_REPLAY_API}/builds?platforms=${platform}&buildType=core`
);

const allBuilds = await res.json();
const uniqBuilds = getUniqBy(sortByBuildDate(allBuilds), "coreId");
const builds = sortByCoreName(uniqBuilds);
---

<div>
  {builds.length === 0 && <div>No cores available.</div>}
  {
    builds.map((build) => <div>core id: {build.coreId}</div>)
    // <CoreCard v-for="core in platformData" :key="core.id" :core="core" :show-details="true" @select-core="$event => $emit('select-core', $event)" />
  }
</div>
