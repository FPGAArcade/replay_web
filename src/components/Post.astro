---
import type { CollectionEntry } from "astro:content";

import { getEntries } from "astro:content";
import { Icon } from "astro-icon";
import PostExcerpt from "@components/PostExcerpt.astro";
import PostImage from "@components/PostImage.astro";

interface Props {
  post: CollectionEntry<"posts">;
  summary?: boolean;
}

const { post, summary=false } = Astro.props;

const authors = await getEntries(post.data.authors);
const tags = post.data.tags ?? []
const published = new Date(post.data.created).toLocaleDateString("en-GB", {
  weekday: "short",
  year: "numeric",
  month: "short",
  day: "numeric",
});

const {Content} = await post.render()
---

<article class="post">
  <div class="post__title">
    <a href={`/post/${post.slug}`}>{post.data.title}</a>
  </div>
  <div class="meta">
    <div>
      <Icon name="mdi:calendar-month" /><span>{published}</span>
    </div>
    <div>
      <Icon name="mdi:account" />
      {
        authors.map((author) => (
          <span class="meta__author">
            {author.data.name}
          </span>
        ))
      }
    </div>
    { tags.length !== 0 &&
      <div>
        <Icon name="mdi:tags" />
        {
          tags.map(tag => (
            <span class="meta__tag">
              <a href={`/tags/${tag}`}>{tag}</a>
            </span>
          ))
        }        
      </div>
    }
    {
      false && (
        <div>
          <Icon name="mdi:book-open-variant" />
          <span>?? minutes</span>
        </div>
      )
    }
  </div>
  <div>{summary ? <a href={`/post/${post.slug}`}><PostImage post={post} /></a> : <PostImage post={post} />}</div>
  <div>{summary ? <PostExcerpt post={post} /> : <Content />}</div>
  {summary && <div class="post__continue"><a href={`/post/${post.slug}`}>Continue reading...</a></div>}
</article>

<style>
  
  .post {
    --item-spacing: 1rem;
    
    display: grid;
    grid-template-rows: min-content min-content min-content 1fr min-content;
    
    border: 1px solid darkgrey;
    background: white;
    min-height: 20rem;
  }

  .post > * {
    margin-inline: var(--item-spacing);
    margin-bottom: var(--item-spacing);
  }

  .post__title {
    margin-top: var(--item-spacing);

    font-size: 1.25em;
    font-weight: bold;

    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;

    @supports (-webkit-line-clamp: 2) {
      white-space: initial;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
    }
  }

  .meta {
    display: inline-flex;
    justify-content: start;
    align-items: center;
  
    font-size: 0.7rem;
    text-transform: uppercase;

    border-bottom: 1px solid lightgrey;
    margin-bottom: 1rem;
  }

  .meta > div {
    margin-inline-end: 0.5rem;
    display: flex;
    align-items: center;
  }

  .meta svg {
    height: 0.7rem;
    padding-inline-end: 0.1rem;
  }

  .meta__author:not(:last-child)::after, .meta__tag:not(:last-child)::after {
    content: ", ";
  }
</style>
